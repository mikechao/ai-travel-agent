import type { CallbackManagerForToolRun } from '@langchain/core/callbacks/manager'
import type { BaseChatModel } from '@langchain/core/language_models/chat_models'
import type { StructuredToolInterface, ToolRunnableConfig } from '@langchain/core/tools'
import { BaseToolkit, DynamicStructuredTool, StructuredTool, Tool } from '@langchain/core/tools'
import { consola } from 'consola'
import { z } from 'zod'

class SearchQueryTool extends StructuredTool {
  name = 'searchQueryTool'
  description = `Used to generate search queries that are relevant to a user's travel interest`
  schema = z.object({
    interest: z.string().describe(`The user's travel interest to generate search queries for`),
  })
  llm: BaseChatModel
  constructor(llm: BaseChatModel) {
    super({ responseFormat: 'content_and_artifact', verboseParsingErrors: false})
    this.llm = llm
  }

  protected async _call(input: { interest: string }): Promise<any> {
    const { interest } = input
    consola.info(`searchQueryTool called with ${interest}`)

    const queryPrompt = `You are a search query generator tasked with creating 
    targeted search queries to gather specific travel information or ideas related
    to the user's interest of ${interest}. 
    Generate at most 3 search queries that will help the user with their reasearch 
    about their travel interest. 
    Your query should: 
    1. Focus on finding factual, interesting travel information and ideas 
    2. Target travel news, blogs and other travel related sources 
    3. Prioritize finding information that matches the user's interest of ${interest} 
    4. Be specific enough to avoid irrelevant results 
    Create a focused query that will maximize the chances of finding relevant information`

    const outputSchema = z.object({
      queries: z.array(z.string()).describe('List of search queries.'),
    })

    const structuredLLM = this.llm.withStructuredOutput(outputSchema)

    const result = await structuredLLM.invoke([
      { role: 'system', content: queryPrompt },
      { role: 'user', content: `Please generate a list of search queries related to my travel interest of ${interest}` },
    ])

    consola.info('result', result)
    return ['I have generated some search queries that will be used later.', result]
  }
}

class SearchExecutionTool extends StructuredTool {
  name = 'searchExecutionTool'
  description = `Used to execute search queries generated by the \'searchQueryTool\'`
  schema = z.object({
    queries: z.array(z.string()).describe(`List of search queries to execute, generated by the \'searchQueryTool\'.`),
  })

  constructor() {
    super({ responseFormat: 'content', verboseParsingErrors: false })
  }

  protected _call(arg: any): Promise<any> {
    consola.info('searchExecutionTool _call with ', arg)
    consola.info('arg type', Object.prototype.toString.call(arg))
    return Promise.resolve('I am suppose to search the web')
  }
}

export class TravelRecommendToolKit extends BaseToolkit {
  tools: StructuredToolInterface[]

  constructor(llm: BaseChatModel) {
    super()
    this.tools = [
      new SearchQueryTool(llm),
      new SearchExecutionTool(),
    ]
  }
}
